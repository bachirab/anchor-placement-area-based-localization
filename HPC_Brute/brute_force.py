# -*- coding: utf-8 -*-
"""Brute Force.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WQOtFBJtH3RGjs-_INtIOfE4vv5LQ0gs
"""

from sys import stdout
from shapely.geometry import Point, MultiPolygon, Polygon
from random import random
from numpy import *
import numpy as np
from itertools import combinations
import matplotlib.pyplot as plt
from descartes import PolygonPatch
import shapely.speedups
import sys
shapely.speedups.enable()
import time
from our_library import *
from shapely.wkt import loads, dumps

#MAX_X = 4 * 7  *15 *31
#MAX_Y = 4 * 7 *15 *31

if len(sys.argv)==3:
    TICS = eval(sys.argv[1])
    NB_ANCHORS = eval(sys.argv[2])

# Param

minAvgRA = 999999999

positions = []
for i in range(MAX_X // TICS):
    for j in range(MAX_Y // TICS):
        positions.append((i * TICS, j * TICS))
anchors_list = list(combinations(positions, NB_ANCHORS))

start = time.time()
#anchors_list = [[(7, 0), (7, 21), (21, 7), (21, 14)]]
for index, anchors in enumerate(anchors_list):
 print(index,'/',len(anchors_list))
# stdout.write("\r%s/%d" % (color(index, len(anchors_list)), len(anchors_list)))
# stdout.flush()
 l = getAllSubRegions(anchors)
 res = getDisjointSubRegions(l)
 avgRA = getExpectation(res)
 if avgRA != 0:
     if minAvgRA > avgRA:
         minAvgRA = avgRA
         optimal_anchors = []
         for a in anchors:
             optimal_anchors.append(a)
         optimal_areas = res
# get the different residence area to draw them
end = time.time()
#drawNetwork(optimal_anchors, optimal_areas)
print("**Optimal Anchor Pos.:" + str(optimal_anchors), minAvgRA)
print('Runinig Times : ' + str(round((end - start) / 60.0, 2)) + ' (min.)')

f_res = open('./IMG/brute.txt', 'a')
f_res.write(str(optimal_anchors)+';'+str(minAvgRA)+';'+str(end - start)+';'+str(NB_ANCHORS)+';'+str(TICS)+'\n')
f_res.close()
